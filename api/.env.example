# =============================================================================
# BEAUTIFUL_ENCER API - ENVIRONMENT CONFIGURATION
# =============================================================================
# This file contains all environment variables required for the API server.
# Copy this file to .env and fill in your actual values.
# IMPORTANT: Never commit the actual .env file to version control.
# =============================================================================

# -----------------------------------------------------------------------------
# SERVER CONFIGURATION
# -----------------------------------------------------------------------------
# Port on which the API server will run
PORT=3000

# Node environment: production | development | test
NODE_ENV=production

# Frontend URL for CORS configuration
FRONTEND_URL=https://your-frontend-domain.com

# -----------------------------------------------------------------------------
# DATABASE CONFIGURATION
# -----------------------------------------------------------------------------
# PostgreSQL connection string
# Format: postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA
# For production (e.g., Render): Add ?sslmode=require at the end
# Example: postgresql://user:pass@host:5432/db?schema=public&sslmode=require
DATABASE_URL="postgresql://username:password@localhost:5432/beautifulencer?schema=public&sslmode=require"

# -----------------------------------------------------------------------------
# JWT (JSON Web Token) CONFIGURATION
# -----------------------------------------------------------------------------
# Secret key for signing access tokens (MUST be at least 32 characters)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_ACCESS_SECRET=your_jwt_access_secret_here_must_be_at_least_32_characters_long

# Secret key for signing refresh tokens (MUST be at least 32 characters)
JWT_REFRESH_SECRET=your_jwt_refresh_secret_here_must_be_at_least_32_characters_long

# Token expiration times
ACCESS_TOKEN_EXPIRES_IN="15m"
REFRESH_TOKEN_EXPIRES_IN="7d"

# -----------------------------------------------------------------------------
# ENCRYPTION CONFIGURATION
# -----------------------------------------------------------------------------
# Encryption key for social media tokens (MUST be at least 32 characters)
# Uses AES-256-GCM encryption for storing OAuth tokens securely
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
ENCRYPTION_KEY=your_encryption_key_here_must_be_at_least_32_characters_long

# Encryption initialization vector (16 bytes for AES)
# Generate with: node -e "console.log(require('crypto').randomBytes(16).toString('hex'))"
ENCRYPTION_IV=generate_16_byte_hex_string_for_initialization_vector

# -----------------------------------------------------------------------------
# CRON JOB AUTHENTICATION
# -----------------------------------------------------------------------------
# Secret key for authenticating internal automated tasks
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
CRON_JOB_SECRET=generate_random_secret_for_cron_job_authentication

# -----------------------------------------------------------------------------
# EMAIL CONFIGURATION
# -----------------------------------------------------------------------------
# Email service for sending OTPs and notifications
# Option 1: Resend API (recommended for production)
# Get API key from: https://resend.com/
RESEND_API_KEY=your_resend_api_key_here

# Option 2: Brevo (Sendinblue) API (alternative for production)
# Get API key from: https://www.brevo.com/
BREVO_API_KEY=your_brevo_api_key_here

# Option 3: SMTP (Nodemailer) - For development or custom SMTP servers
# Common SMTP hosts:
# - Gmail: smtp.gmail.com (port 587 or 465)
# - Outlook: smtp-mail.outlook.com (port 587)
# - SendGrid: smtp.sendgrid.net (port 587)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_app_specific_password

# Email sender address
EMAIL_FROM=noreply@beautifulencer.com

# -----------------------------------------------------------------------------
# CLOUDINARY CONFIGURATION (Image Upload & Storage)
# -----------------------------------------------------------------------------
# Get credentials from: https://cloudinary.com/console
CLOUDINARY_CLOUD_NAME=your_cloud_name
CLOUDINARY_API_KEY=your_api_key
CLOUDINARY_API_SECRET=your_api_secret

# -----------------------------------------------------------------------------
# APIFY CONFIGURATION (Social Media Scraping)
# -----------------------------------------------------------------------------
# Apify API token for scraping Instagram and TikTok public profiles
# Get API token from: https://console.apify.com/account/integrations
# Used for public profile data collection (NO OAuth required)
# Free tier: ~$5/month for 500-1000 profiles
APIFY_API_TOKEN=your_apify_api_token_here

# Apify Actor IDs for Instagram and TikTok scrapers
# Instagram: https://apify.com/apify/instagram-profile-scraper
APIFY_ACTOR_ID=apify/instagram-profile-scraper

# TikTok: https://apify.com/clockworks/tiktok-scraper
APIFY_TIKTOK_ACTOR_ID=clockworks/tiktok-scraper

# NOTES AND IMPORTANT INFORMATION
# -----------------------------------------------------------------------------
# 1. Instagram: This app uses Apify scraping (NOT Meta OAuth) for public profiles
#    - No INSTAGRAM_APP_ID or INSTAGRAM_APP_SECRET required
#    - All Instagram data is collected via APIFY_API_TOKEN
#
# 2. TikTok: Supports both public scraping (Apify) and OAuth (connected accounts)
#    - Public profiles: Uses APIFY_API_TOKEN (no user authorization needed)
#    - Connected accounts: Uses TIKTOK_CLIENT_KEY/SECRET for OAuth flow
#
# 3. Database migrations:
#    - Development: npx prisma migrate dev
#    - Production: npx prisma migrate deploy
#
# 4. Automated cron jobs (configured in server.ts):
#    - Token Refresh: 2:00 AM daily (refreshes TikTok OAuth tokens)
#    - Data Sync: 3:00 AM daily (syncs Instagram and TikTok data)
#    - Instagram Reminder: 10:00 AM every Monday (reminds users to verify)
#
# 5. Security:
#    - All secrets should be at least 32 characters long
#    - Never commit .env file to version control
#    - Use strong, randomly generated secrets in production
#    - Enable SSL for database connections in production (sslmode=require)
#
# 6. Email configuration:
#    - Production: Use Resend or Brevo for reliable email delivery
#    - Development: Can use Gmail SMTP with app-specific password
#    - Configure EMAIL_FROM to match your domain for better deliverability
# =============================================================================
